input {
	gelf {
		type => "gelf_udp"
		port => 4790
		use_udp => true
		use_tcp => false
	}
	gelf {
		type => "gelf_tcp"
		port_tcp => 4790
		use_udp => false
		use_tcp => true
	}
	s3 {
		type => "elb_s3"
		bucket => "bucket_name_here"
		endpoint => "http://s3.ca-central-1.amazonaws.com"
		additional_settings => {
			force_path_style => true
			follow_redirects => false
		}
	}
}

## Add your filters / logstash plugins configuration here
filter {
	if [type] == "elb_s3" {
		grok {
			match => [ "message", "%{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:elb} %{IP:clientip}:%{INT:clientport:int} (?:(%{IP:backendip}:?:%{INT:backendport:int})|-) %{NUMBER:request_processing_time:float} %{NUMBER:backend_processing_time:float} %{NUMBER:response_processing_time:float} (?:-|%{INT:elb_status_code:int}) (?:-|%{INT:backend_status_code:int}) %{INT:received_bytes:int} %{INT:sent_bytes:int} \"(?:%{WORD:verb}|-) (?:%{GREEDYDATA:request}|-) (?:HTTP/%{NUMBER:httpversion}|-( )?)\" \"(?:-|%{DATA:user_agent})\" (?:-|%{NOTSPACE:ssl_cipher}) (?:-|%{NOTSPACE:ssl_protocol})" ]
		}

		grok {
			match => ["request", "%{URIPROTO:http_protocol}"]
		}

		geoip {
			source => "clientip"
			target => "geoip"
			add_tag => ["geoip"]
		}

		useragent {
			source => "userAgent"
		}

		date {
			match => ["timestamp", "ISO8601"]
		}
	}
}

output {
	elasticsearch {
		hosts => "${ES_HOST:elasticsearch:9200}"
	}
}
